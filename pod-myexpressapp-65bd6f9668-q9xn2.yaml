apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2024-05-31T20:29:03Z"
  generateName: myexpressapp-65bd6f9668-
  labels:
    app: myexpressapp
    pod-template-hash: 65bd6f9668
  name: myexpressapp-65bd6f9668-q9xn2
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: myexpressapp-65bd6f9668
    uid: ccd943a4-3f3e-4fd4-88df-3b82ac7ce2ba
  resourceVersion: "534"
  uid: 1c0d773d-dad4-4555-a4a2-43c64cdb4e72
spec:
  containers:
  - image: docker.io/klotzt/myexpressapp:latestImage
    imagePullPolicy: IfNotPresent
    name: myexpressapp
    ports:
    - containerPort: 3000
      protocol: TCP
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 500m
        memory: 128Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-kxs8m
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: docker-desktop
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-kxs8m
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2024-05-31T20:29:06Z"
    status: "True"
    type: PodReadyToStartContainers
  - lastProbeTime: null
    lastTransitionTime: "2024-05-31T20:29:03Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2024-05-31T20:29:03Z"
    message: 'containers with unready status: [myexpressapp]'
    reason: ContainersNotReady
    status: "False"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2024-05-31T20:29:03Z"
    message: 'containers with unready status: [myexpressapp]'
    reason: ContainersNotReady
    status: "False"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2024-05-31T20:29:03Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - image: docker.io/klotzt/myexpressapp:latestImage
    imageID: ""
    lastState: {}
    name: myexpressapp
    ready: false
    restartCount: 0
    started: false
    state:
      waiting:
        message: Back-off pulling image "klotzt/myexpressapp:latestImage"
        reason: ImagePullBackOff
  hostIP: 192.168.65.3
  hostIPs:
  - ip: 192.168.65.3
  phase: Pending
  podIP: 10.1.0.6
  podIPs:
  - ip: 10.1.0.6
  qosClass: Guaranteed
  startTime: "2024-05-31T20:29:03Z"
